[{"/Users/tylerwest/Desktop/weatherapp/client/src/index.js":"1","/Users/tylerwest/Desktop/weatherapp/client/src/App.js":"2","/Users/tylerwest/Desktop/weatherapp/client/src/reportWebVitals.js":"3","/Users/tylerwest/Desktop/weatherapp/client/src/Components/PlaceholderCards.jsx":"4","/Users/tylerwest/Desktop/weatherapp/client/src/Components/CardDetail.jsx":"5"},{"size":500,"mtime":1648130244000,"results":"6","hashOfConfig":"7"},{"size":12853,"mtime":1655575254567,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1648130244000,"results":"9","hashOfConfig":"7"},{"size":925,"mtime":1655389022000,"results":"10","hashOfConfig":"7"},{"size":1053,"mtime":1655407272000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xpief8",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tylerwest/Desktop/weatherapp/client/src/index.js",[],[],"/Users/tylerwest/Desktop/weatherapp/client/src/App.js",["28","29","30","31","32","33","34","35","36","37","38","39","40","41"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport moment from 'moment';\nimport '../src/App.scss';\nimport lottie from 'lottie-web';\nimport { useForm, useWatch } from 'react-hook-form';\nimport PlaceholderCards from './Components/PlaceholderCards';\nimport CardDetail from './Components/CardDetail';\n\nfunction App() {\n\n  //Hello world\n  \n  const apiKey = \"8bd04b4c4bc8f493a35b227dba34ae78\";\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [customLocation, setCustomLocation] = useState({\n    customLatitude: null,\n    customLongitude: null\n  })\n  const [cardDetail, setCardDetail] = useState([]);\n  const [cardDetailVisible, setCardDetailVisible] = useState(false);\n  const [usingCurrentLocation, setUsingCurrentLocation] =useState(null);\n  const [errorState, setErrorState] = useState(true);\n  const [animationDestroyed, setAnimationDestroyed] = useState(null);\n\n  const [error, setError] = useState(null);\n\n  //Weather animations\n  const sunny = require('../src/svg/sunny.json');\n  const snow = require('../src/svg/rainy.json');\n  const cloudy = require('../src/svg/cloudy.json');\n  const rainy = require('../src/svg/rainy.json');\n\n  //Submit custom data\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const inputData = new FormData(e.target);\n    const iLatitude = inputData.get('latitude')\n    const iLongitude = inputData.get('longitude');\n\n    const data = {\n      inputLatitude: iLatitude,\n      inputLongitude: iLongitude\n    }\n\n    getCustomLocation(data);\n  }\n\n  const container = useRef(null);\n\n  const loaderAnim = () => {\n    lottie.loadAnimation({\n      container: container.current,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n      animationData: require('../src/svg/loader.json')\n    })\n  }\n\n  const sunnyAnim = (card,weather) => {\n    lottie.loadAnimation({\n      container: card,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n      animationData: weather\n    })\n    console.log('loading sunny anim');\n  }\n\n\n    //State changed\n    useEffect(() => {\n      checkPermissions();\n      setLoading(true);\n      loaderAnim();\n    },[])\n\n////////////////\n    function getPosition() {\n      // Simple wrapper\n      return new Promise((res, rej) => {\n          navigator.geolocation.getCurrentPosition(res, rej);\n      });\n    }\n\n    function main() {\n      getPosition().then(console.log('Hello world heres some coordinates')); // wait for getPosition to complete\n    }\n\n    main();\n/////////////////////////\n\n  //Check for location permissions\n  const checkPermissions = () => {\n\n    //Check if browser is safari or chrome\n    var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || (typeof safari !== 'undefined' && window['safari'].pushNotification));\n\n    if(isSafari){\n      console.log('Browser is safari');\n    }else{\n      console.log('Browser is chrome');\n\n    navigator.permissions.query({name:'geolocation'}).then(function(result) {\n      // Will return ['granted', 'prompt', 'denied']\n      console.log(result.state);\n      if(result.state === 'granted'){\n        getLocation();\n      }else{\n        console.log('Enable location to use current location');\n        const data = {\n          latitude: 37.7749,\n          longitude: 122.4194\n        }\n        getWeather(data)\n      }\n    });\n  }\n  \n  }\n\n\n //Get location\n const getLocation = async () => {\n\n\n  //Safari check locations\n  navigator.geolocation.getCurrentPosition(showMap);\n\n  function showMap(position) {\n    console.log('Hello');\n  }\n  /////////\n\n  setLoading(true);\n  if(animationDestroyed){\n    loaderAnim();\n  }\n\n  //Get current location\n  await navigator.geolocation.getCurrentPosition((position)=> {\n    setLoading(false);\n    const currentLocation = position.coords;\n    console.log(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&units=imperial&appid=${apiKey}`);\n    getWeather(currentLocation);\n    setUsingCurrentLocation(true);\n  })\n\n }\n\n  //Get custom location\n  const getCustomLocation = async (data) => {\n    console.log(data);\n    setLoading(true);\n    if(animationDestroyed){\n      loaderAnim();\n    }\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.inputLatitude}&lon=${data.inputLongitude}&units=imperial&appid=${apiKey}`)\n      .then(response => response.json())\n      .then((data) => {\n        setLoading(false);\n\n        lottie.destroy();\n        setAnimationDestroyed(true);\n\n        setUsingCurrentLocation(false);\n\n        console.log(data);\n\n        //User location\n        setUserLocation(data);\n\n        const weatherData = data.daily;\n        setWeather(weatherData);\n\n        //Set days\n        let newDays = [];\n        data.daily.map((day) => {\n          let dayInt = new Date(day.dt*1000).toDateString();\n          newDays.push(dayInt);\n        })\n\n        //Loading set to false\n        //setLoading(false);\n\n        setDays(newDays);\n\n        //Add emoji to each day\n        data.daily.map((day, index) => {\n\n          const id = day.weather[0].id;\n\n          //Assign\n          const card = document.getElementById(`card-image-${index}`)\n\n          //Filter weather and pass animation\n          if(id >= 200 && id < 300){\n            //Thunderstorm\n            const weather = rainy;\n            sunnyAnim(card,weather);\n          }else if(id >= 300 && id < 400){\n            //Drizzle\n            const weather = rainy;\n            sunnyAnim(card,weather);\n          }else if(id >= 300 && id < 400){\n            //Rain\n            const weather = rainy;\n            sunnyAnim(card,weather);\n          }else if(id >= 500 && id < 600){\n            //Snow\n            const weather = snow;\n            sunnyAnim(card,weather);\n          }else if(id >= 600 && id < 700){\n            //Atmosphere\n            const weather = cloudy;\n            sunnyAnim(card,weather);\n          }else if(id === 800){\n            //Clear\n            const weather = sunny;\n            sunnyAnim(card,weather);\n          }else if(id > 800){\n            //Clouds\n            const weather = cloudy;\n            sunnyAnim(card,weather);\n          }\n        })\n        \n      })\n      .catch(function(err){\n        setError(true);\n        console.log(`${err} sorry cannot display data`);\n        setLoading(true);\n        setErrorState(false);\n      });\n   }\n\n\n  //Get weather\n  const getWeather = async (currentLocation) => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&units=imperial&appid=${apiKey}`)\n      .then(response => response.json())\n      .then((data) => {\n        lottie.destroy();\n        setAnimationDestroyed(true);\n\n\n\n        console.log(data);\n\n        setUsingCurrentLocation(true);\n\n        //User location\n        setUserLocation(data);\n\n        //Set coordinates\n        setLatitude(currentLocation.latitude);\n        setlongitude(currentLocation.longitude);\n\n        const weatherData = data.daily;\n        setWeather(weatherData);\n\n        //Set days\n        let newDays = [];\n        data.daily.map((day) => {\n          let dayInt = new Date(day.dt*1000).toDateString();\n          newDays.push(dayInt);\n        })\n        setDays(newDays);\n\n        //Loading set to false\n        setLoading(false);\n\n        //Add emoji to each day\n        data.daily.map((day, index) => {\n\n          const id = day.weather[0].id;\n\n          //Assign\n          const card = document.getElementById(`card-image-${index}`)\n\n          //Filter weather and pass animation\n          if(id >= 200 && id < 300){\n            //Thunderstorm\n            const weather = sunny;\n            sunnyAnim(card,weather);\n          }else if(id >= 300 && id < 400){\n            //Drizzle\n            const weather = sunny;\n            sunnyAnim(card,weather);\n          }else if(id >= 300 && id < 400){\n            //Rain\n            const weather = sunny;\n            sunnyAnim(card,weather);\n          }else if(id >= 500 && id < 600){\n            //Snow\n            const weather = snow;\n            sunnyAnim(card,weather);\n          }else if(id >= 600 && id < 700){\n            //Atmosphere\n            const weather = cloudy;\n            sunnyAnim(card,weather);\n          }else if(id === 800){\n            //Clear\n            const weather = sunny;\n            sunnyAnim(card,weather);\n          }else if(id > 800){\n            //Clouds\n            const weather = cloudy;\n            sunnyAnim(card,weather);\n          }\n        })\n      })\n      .then(()=>{\n        console.log('Weather data displayed');\n      })\n      .catch(function(err){\n        setError(true);\n        console.log(`${err} sorry cannot display data`);\n        setLoading(true);\n        setErrorState(false);\n      });\n    }\n\n    //Card\n    function cardHandler(e, day) {\n      e.preventDefault();\n      console.log(day);\n      setCardDetail(day);\n      setCardDetailVisible(true);\n    }\n\n    function handleCardClose(){\n      console.log('Closing card');\n      setCardDetailVisible(false);\n    }\n\n    function arrowLeftHandler(){\n      console.log(\"Left tapped\");\n      const container = document.getElementById(\"day-card-container\");\n      container.scrollLeft -= container.scrollWidth;\n    }\n\n    function arrowRightHandler(){\n      console.log(\"Right tapped\");\n      const container = document.getElementById(\"day-card-container\");\n      container.scrollLeft = container.scrollWidth;\n    }\n\n  return (\n    <div id='page-container'>\n      <h1 id='footer'>Made with love from the help of Lottie, OpenWeather API, and React - <a id='site-link' href=\"https://www.tylerwest.co/\">Tylerwest.co</a></h1>\n      <CardDetail handleCardClose={() => handleCardClose} cardDetailVisible={cardDetailVisible} dailyDetails={cardDetail}/>\n      <div id='weather-container'>\n      <div id='weather'>\n        <div id='loader' ref={container} className={loading ? \"loader-state\" : \"\"} ></div>\n        <div id='weather-form'>\n          {loading ? <h1>Predicting weather for...</h1> : <h1>{userLocation.timezone}</h1>}\n          <div id='input'>\n            <form onSubmit={(e) => onSubmit(e)}>\n              <input name='latitude' type=\"number\" step=\"any\" required=\"required\" id='inputField' placeholder='Latitude'></input>\n              <input name='longitude' type=\"number\" step=\"any\" id='inputField' placeholder='longitude'></input>\n              <button>Search location</button>\n              {usingCurrentLocation ? <button type=\"button\" onClick={() => getLocation()}>{userLocation.timezone}</button> : <button type=\"button\" onClick={() => getLocation()}>Use current location</button>}\n            </form>\n          </div>\n        </div>\n        {loading ? <PlaceholderCards errorState={errorState}/> :\n        <div id='day-card-container'>\n          <div onClick={() => arrowLeftHandler()} id='arrow-left'>\n          <svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"30\" cy=\"30\" r=\"29.5\" fill=\"#2C2C2C\" stroke=\"white\"/><path d=\"M26.6066 19L37.2132 29.6066L26.6066 40.2132\" stroke=\"white\"/></svg>\n          </div>\n          <div id='arrow-right' onClick={() => arrowRightHandler()}>\n          <svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"30\" cy=\"30\" r=\"29.5\" fill=\"#2C2C2C\" stroke=\"white\"/><path d=\"M26.6066 19L37.2132 29.6066L26.6066 40.2132\" stroke=\"white\"/></svg>\n          </div>\n          {userLocation.daily?.map((day,index) => (\n          <div id='day-card' key={index} onClick={(e) => cardHandler(e, day)}>\n              <div className='card-image' id={`card-image-${index}`}></div>\n              <h3 id='weather-text'>{day.weather[0].main}</h3>\n              <h2 id='day-text'>{moment.unix(day.dt).format(\"dddd MM/DD\")}</h2>\n              <ul id='weather-list'>\n                <li>\n                  <h4 id='list-sub'>Day</h4>\n                  <h4 id='list-header'>{day.temp.day}</h4>\n                </li>\n                <li>\n                  <h4 id='list-sub'>Morning</h4>\n                  <h4 id='list-header'>{day.temp.morn}</h4>\n                </li>\n                <li>\n                  <h4 id='list-sub'>Evening</h4>\n                  <h4 id='list-header'>{day.temp.eve}</h4>\n                </li>\n                <li>\n                  <h4 id='list-sub'>Night</h4>\n                  <h4 id='list-header'>{day.temp.night}</h4>\n                </li>\n              </ul>\n            </div>\n        ))}</div>}\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tylerwest/Desktop/weatherapp/client/src/reportWebVitals.js",[],[],"/Users/tylerwest/Desktop/weatherapp/client/src/Components/PlaceholderCards.jsx",[],[],"/Users/tylerwest/Desktop/weatherapp/client/src/Components/CardDetail.jsx",[],[],{"ruleId":"42","severity":1,"message":"43","line":5,"column":10,"nodeType":"44","messageId":"45","endLine":5,"endColumn":17},{"ruleId":"42","severity":1,"message":"46","line":5,"column":19,"nodeType":"44","messageId":"45","endLine":5,"endColumn":27},{"ruleId":"42","severity":1,"message":"47","line":15,"column":10,"nodeType":"44","messageId":"45","endLine":15,"endColumn":18},{"ruleId":"42","severity":1,"message":"48","line":16,"column":10,"nodeType":"44","messageId":"45","endLine":16,"endColumn":19},{"ruleId":"42","severity":1,"message":"49","line":18,"column":10,"nodeType":"44","messageId":"45","endLine":18,"endColumn":17},{"ruleId":"42","severity":1,"message":"50","line":19,"column":10,"nodeType":"44","messageId":"45","endLine":19,"endColumn":14},{"ruleId":"42","severity":1,"message":"51","line":21,"column":10,"nodeType":"44","messageId":"45","endLine":21,"endColumn":24},{"ruleId":"42","severity":1,"message":"52","line":21,"column":26,"nodeType":"44","messageId":"45","endLine":21,"endColumn":43},{"ruleId":"42","severity":1,"message":"53","line":31,"column":10,"nodeType":"44","messageId":"45","endLine":31,"endColumn":15},{"ruleId":"54","severity":1,"message":"55","line":84,"column":7,"nodeType":"56","endLine":84,"endColumn":9,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":186,"column":30,"nodeType":"60","messageId":"61","endLine":186,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":197,"column":37,"nodeType":"60","messageId":"61","endLine":197,"endColumn":39},{"ruleId":"58","severity":1,"message":"59","line":272,"column":30,"nodeType":"60","messageId":"61","endLine":272,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":282,"column":37,"nodeType":"60","messageId":"61","endLine":282,"endColumn":39},"no-unused-vars","'useForm' is defined but never used.","Identifier","unusedVar","'useWatch' is defined but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'weather' is assigned a value but never used.","'days' is assigned a value but never used.","'customLocation' is assigned a value but never used.","'setCustomLocation' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkPermissions'. Either include it or remove the dependency array.","ArrayExpression",["62"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"63","fix":"64"},"Update the dependencies array to be: [checkPermissions]",{"range":"65","text":"66"},[2351,2353],"[checkPermissions]"]