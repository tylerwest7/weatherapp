{"ast":null,"code":"var _jsxFileName = \"/Users/tylerwest/Desktop/weatherapp/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [weather, setWeather] = useState();\n  const [days, setDays] = useState([]); //State changed\n\n  useEffect(() => {\n    getLocation();\n  }, []); //Get location\n\n  const getLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(position => {\n      const currentLocation = position.coords;\n      getWeather(currentLocation);\n    });\n  }; //Get weather\n\n\n  const getWeather = currentLocation => {\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&appid=8bd04b4c4bc8f493a35b227dba34ae78`).then(response => response.json()).then(data => {\n      //Set coordinates\n      setLatitude(currentLocation.latitude);\n      setlongitude(currentLocation.longitude);\n      setWeather(data.daily); //Set days\n\n      let newDays = [];\n      data.daily.map(day => {\n        let dayInt = new Date(day.dt * 1000).toDateString();\n        newDays.push(dayInt);\n      });\n      setDays(newDays);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: latitude\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: longitude\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), days.map((day, index) => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: day\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)), weather.map(item => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: item.humidity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"I7k+LYS+ic6X81wVX/97cY2Oh5A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tylerwest/Desktop/weatherapp/client/src/App.js"],"names":["React","useEffect","useState","App","latitude","setLatitude","longitude","setlongitude","weather","setWeather","days","setDays","getLocation","navigator","geolocation","getCurrentPosition","position","currentLocation","coords","getWeather","fetch","then","response","json","data","daily","newDays","map","day","dayInt","Date","dt","toDateString","push","index","item","humidity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,EAAtC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC,CALa,CAOX;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW;AACZ,GAFQ,EAEP,EAFO,CAAT,CARW,CAYd;;AACA,QAAMA,WAAW,GAAG,YAAY;AAC/B,UAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAa;AAC1D,YAAMC,eAAe,GAAGD,QAAQ,CAACE,MAAjC;AACAC,MAAAA,UAAU,CAACF,eAAD,CAAV;AACD,KAHK,CAAN;AAIA,GALD,CAbc,CAoBb;;;AACA,QAAME,UAAU,GAAIF,eAAD,IAAqB;AACvCG,IAAAA,KAAK,CAAE,uDAAsDH,eAAe,CAACb,QAAS,QAAOa,eAAe,CAACX,SAAU,yCAAlH,CAAL,CACIe,IADJ,CACSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADrB,EAEIF,IAFJ,CAEUG,IAAD,IAAU;AAEd;AACAnB,MAAAA,WAAW,CAACY,eAAe,CAACb,QAAjB,CAAX;AACAG,MAAAA,YAAY,CAACU,eAAe,CAACX,SAAjB,CAAZ;AAEAG,MAAAA,UAAU,CAACe,IAAI,CAACC,KAAN,CAAV,CANc,CAQd;;AACA,UAAIC,OAAO,GAAG,EAAd;AACAF,MAAAA,IAAI,CAACC,KAAL,CAAWE,GAAX,CAAgBC,GAAD,IAAS;AACtB,YAAIC,MAAM,GAAG,IAAIC,IAAJ,CAASF,GAAG,CAACG,EAAJ,GAAO,IAAhB,EAAsBC,YAAtB,EAAb;AACAN,QAAAA,OAAO,CAACO,IAAR,CAAaJ,MAAb;AACD,OAHD;AAKAlB,MAAAA,OAAO,CAACe,OAAD,CAAP;AACD,KAlBJ;AAmBA,GApBD;;AAuBA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAKtB;AAAL;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,YAHF,EAKGI,IAAI,CAACiB,GAAL,CAAS,CAACC,GAAD,EAAMM,KAAN,kBACR;AAAA,gBAAiBN;AAAjB,OAASM,KAAT;AAAA;AAAA;AAAA;AAAA,YADD,CALH,EASG1B,OAAO,CAACmB,GAAR,CAAaQ,IAAD,iBACX;AAAA,gBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,YADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA3DQjC,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [weather, setWeather] = useState();\n  const [days, setDays] = useState([]);\n\n    //State changed\n    useEffect(() => {\n      getLocation();\n    },[])\n\n //Get location\n const getLocation = async () => {\n  await navigator.geolocation.getCurrentPosition((position)=> {\n    const currentLocation = position.coords;\n    getWeather(currentLocation);\n  })\n }\n\n  //Get weather\n  const getWeather = (currentLocation) => {\n   fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&appid=8bd04b4c4bc8f493a35b227dba34ae78`)\n      .then(response => response.json())\n      .then((data) => {\n\n        //Set coordinates\n        setLatitude(currentLocation.latitude);\n        setlongitude(currentLocation.longitude);\n\n        setWeather(data.daily);\n\n        //Set days\n        let newDays = [];\n        data.daily.map((day) => {\n          let dayInt = new Date(day.dt*1000).toDateString();\n          newDays.push(dayInt);\n        })\n\n        setDays(newDays);\n      })\n  }\n\n\n  return (\n    <div>\n      <h1>Weather app</h1>\n      <h2>{latitude}</h2>\n      <h2>{longitude}</h2>\n\n      {days.map((day, index) => (\n        <h1 key={index}>{day}</h1>\n      ))}\n\n      {weather.map((item) => (\n        <h1>{item.humidity}</h1>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}