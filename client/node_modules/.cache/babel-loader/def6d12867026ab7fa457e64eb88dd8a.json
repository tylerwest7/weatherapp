{"ast":null,"code":"var _jsxFileName = \"/Users/tylerwest/Desktop/weatherapp/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport '../src/App.scss';\nimport lottie from 'lottie-web';\nimport { useForm, useWatch } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _userLocation$daily;\n\n  const apiKey = \"8bd04b4c4bc8f493a35b227dba34ae78\";\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [customLocation, setCustomLocation] = useState({\n    customLatitude: null,\n    customLongitude: null\n  });\n  const {\n    register,\n    watch,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const onSubmit = data => console.log(data); //State changed\n\n\n  useEffect(() => {\n    setLoading(true);\n  }, []); //Get location\n\n  const getLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(position => {\n      const currentLocation = position.coords;\n      console.log(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&units=imperial&appid=${apiKey}`);\n      getWeather(currentLocation);\n    });\n  }; //Get custom location\n\n\n  const getCustomLocation = () => {\n    const onSubmit = data => console.log(data);\n\n    console.log(`https://api.openweathermap.org/data/2.5/onecall?lat=${100}&lon=${100}&units=imperial&appid=${apiKey}`);\n    getWeather();\n  }; //Get weather\n\n\n  const getWeather = async currentLocation => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&units=imperial&appid=${apiKey}`).then(response => response.json()).then(data => {\n      //User location\n      setUserLocation(data); //Set coordinates\n\n      setLatitude(currentLocation.latitude);\n      setlongitude(currentLocation.longitude);\n      const weatherData = data.daily;\n      setWeather(weatherData); //Set days\n\n      let newDays = [];\n      data.daily.map(day => {\n        let dayInt = new Date(day.dt * 1000).toDateString();\n        newDays.push(dayInt);\n      }); //Loading set to false\n\n      setLoading(false);\n      setDays(newDays);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getLocation(),\n      children: \"Use current location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: userLocation.timezone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register('inputLatitude', {\n          required: true\n        }),\n        placeholder: \"Latitude\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('inputLongitude', {\n          required: true\n        }),\n        placeholder: \"longitude\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Search location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: (_userLocation$daily = userLocation.daily) === null || _userLocation$daily === void 0 ? void 0 : _userLocation$daily.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: moment.unix(day.dt).format(\"dddd MM/DD\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: day.weather[0].main\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: `High of ${day.temp.max}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: `Low of ${day.temp.min}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"UXyrOdWlqHmR2e8xE6Y0V4aUM9Y=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tylerwest/Desktop/weatherapp/client/src/App.js"],"names":["React","useEffect","useState","moment","lottie","useForm","useWatch","App","apiKey","latitude","setLatitude","longitude","setlongitude","userLocation","setUserLocation","weather","setWeather","days","setDays","loading","setLoading","customLocation","setCustomLocation","customLatitude","customLongitude","register","watch","handleSubmit","formState","errors","onSubmit","data","console","log","getLocation","navigator","geolocation","getCurrentPosition","position","currentLocation","coords","getWeather","getCustomLocation","fetch","then","response","json","weatherData","daily","newDays","map","day","dayInt","Date","dt","toDateString","push","timezone","required","index","unix","format","main","temp","max","min"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport '../src/App.scss';\nimport lottie from 'lottie-web';\nimport { useForm, useWatch } from 'react-hook-form';\n\n\n\nfunction App() {\n\n  const apiKey = \"8bd04b4c4bc8f493a35b227dba34ae78\";\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [customLocation, setCustomLocation] = useState({\n    customLatitude: null,\n    customLongitude: null\n  })\n\n  const {register,watch,handleSubmit,formState: { errors },} = useForm();\n  const onSubmit = (data) => console.log(data);\n\n\n  //State changed\n  useEffect(() => {\n    setLoading(true);\n  },[])\n\n //Get location\n const getLocation = async () => {\n  await navigator.geolocation.getCurrentPosition((position)=> {\n    const currentLocation = position.coords;\n    console.log(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&units=imperial&appid=${apiKey}`);\n    getWeather(currentLocation);\n  })\n }\n\n  //Get custom location\n  const getCustomLocation = () => {\n    const onSubmit = (data) => console.log(data);\n    console.log(`https://api.openweathermap.org/data/2.5/onecall?lat=${100}&lon=${100}&units=imperial&appid=${apiKey}`);\n    getWeather();\n   }\n\n\n  //Get weather\n  const getWeather = async (currentLocation) => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&units=imperial&appid=${apiKey}`)\n      .then(response => response.json())\n      .then((data) => {\n\n        //User location\n        setUserLocation(data);\n\n        //Set coordinates\n        setLatitude(currentLocation.latitude);\n        setlongitude(currentLocation.longitude);\n\n        const weatherData = data.daily;\n        setWeather(weatherData);\n\n        //Set days\n        let newDays = [];\n        data.daily.map((day) => {\n          let dayInt = new Date(day.dt*1000).toDateString();\n          newDays.push(dayInt);\n        })\n\n        //Loading set to false\n        setLoading(false);\n\n        setDays(newDays);\n      })\n    }\n\n  return (\n    <div>\n      <h1>Weather app</h1>\n      <button onClick={() => getLocation()}>Use current location</button>\n      <h2>{userLocation.timezone}</h2>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input {...register('inputLatitude', {required: true})} placeholder='Latitude'></input>\n        <input {...register('inputLongitude', {required: true})} placeholder='longitude'></input>\n        <button>Search location</button>\n      </form>\n      <hr></hr>\n      {loading ? <h2>Spinner</h2> : <h2></h2>}\n      <div>{userLocation.daily?.map((day,index) => (\n        <div key={index}>\n          <h1>{moment.unix(day.dt).format(\"dddd MM/DD\")}</h1>\n          <h2>{day.weather[0].main}</h2>\n          <h4>{`High of ${day.temp.max}`}</h4>\n          <h4>{`Low of ${day.temp.min}`}</h4>\n          </div>\n      ))}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}