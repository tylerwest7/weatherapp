{"ast":null,"code":"var _jsxFileName = \"/Users/tylerwest/Desktop/weatherapp/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]); //State changed\n\n  useEffect(() => {\n    getLocation();\n  }, []); //Get location\n\n  const getLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(position => {\n      const currentLocation = position.coords;\n      getWeather(currentLocation);\n    });\n  }; //Get weather\n\n\n  const getWeather = async currentLocation => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&appid=8bd04b4c4bc8f493a35b227dba34ae78`).then(response => response.json()).then(data => {\n      console.log(data); //Set coordinates\n\n      setLatitude(currentLocation.latitude);\n      setlongitude(currentLocation.longitude);\n      const weatherData = data.daily;\n      setWeather(weatherData); //Set days\n\n      let newDays = [];\n      data.daily.map(day => {\n        let dayInt = new Date(day.dt * 1000).toDateString();\n        newDays.push(dayInt);\n      });\n      setDays(newDays);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), weather.map(wvalues => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: wvalues.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, wvalues.dt, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)), days.map((day, index) => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: day\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"a96+n+RsO7CUJ/Pct+fSypg3bkM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tylerwest/Desktop/weatherapp/client/src/App.js"],"names":["React","useEffect","useState","App","latitude","setLatitude","longitude","setlongitude","userLocation","setUserLocation","weather","setWeather","days","setDays","getLocation","navigator","geolocation","getCurrentPosition","position","currentLocation","coords","getWeather","fetch","then","response","json","data","console","log","weatherData","daily","newDays","map","day","dayInt","Date","dt","toDateString","push","wvalues","description","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CANa,CAQX;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,WAAW;AACZ,GAFQ,EAEP,EAFO,CAAT,CATW,CAad;;AACA,QAAMA,WAAW,GAAG,YAAY;AAC/B,UAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAa;AAC1D,YAAMC,eAAe,GAAGD,QAAQ,CAACE,MAAjC;AACAC,MAAAA,UAAU,CAACF,eAAD,CAAV;AACD,KAHK,CAAN;AAIA,GALD,CAdc,CAqBb;;;AACA,QAAME,UAAU,GAAG,MAAOF,eAAP,IAA2B;AAC5C,UAAMG,KAAK,CAAE,uDAAsDH,eAAe,CAACf,QAAS,QAAOe,eAAe,CAACb,SAAU,yCAAlH,CAAL,CACHiB,IADG,CACEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADd,EAEHF,IAFG,CAEGG,IAAD,IAAU;AAEdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAFc,CAId;;AACArB,MAAAA,WAAW,CAACc,eAAe,CAACf,QAAjB,CAAX;AACAG,MAAAA,YAAY,CAACY,eAAe,CAACb,SAAjB,CAAZ;AAEA,YAAMuB,WAAW,GAAGH,IAAI,CAACI,KAAzB;AACAnB,MAAAA,UAAU,CAACkB,WAAD,CAAV,CATc,CAWd;;AACA,UAAIE,OAAO,GAAG,EAAd;AACAL,MAAAA,IAAI,CAACI,KAAL,CAAWE,GAAX,CAAgBC,GAAD,IAAS;AACtB,YAAIC,MAAM,GAAG,IAAIC,IAAJ,CAASF,GAAG,CAACG,EAAJ,GAAO,IAAhB,EAAsBC,YAAtB,EAAb;AACAN,QAAAA,OAAO,CAACO,IAAR,CAAaJ,MAAb;AACD,OAHD;AAKArB,MAAAA,OAAO,CAACkB,OAAD,CAAP;AACD,KArBG,CAAN;AAsBD,GAvBD;;AA0BA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGrB,OAAO,CAACsB,GAAR,CAAaO,OAAD,iBACX;AAAA,6BACE;AAAA,kBAAKA,OAAO,CAAC7B,OAAR,CAAgB,CAAhB,EAAmB8B;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF,OAAUD,OAAO,CAACH,EAAlB;AAAA;AAAA;AAAA;AAAA,YADD,CAHH,EAQGxB,IAAI,CAACoB,GAAL,CAAS,CAACC,GAAD,EAAMQ,KAAN,kBACR;AAAA,gBAAiBR;AAAjB,OAASQ,KAAT;AAAA;AAAA;AAAA;AAAA,YADD,CARH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA9DQtC,G;;KAAAA,G;AAgET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]);\n\n    //State changed\n    useEffect(() => {\n      getLocation();\n    },[])\n\n //Get location\n const getLocation = async () => {\n  await navigator.geolocation.getCurrentPosition((position)=> {\n    const currentLocation = position.coords;\n    getWeather(currentLocation);\n  })\n }\n\n  //Get weather\n  const getWeather = async (currentLocation) => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&appid=8bd04b4c4bc8f493a35b227dba34ae78`)\n      .then(response => response.json())\n      .then((data) => {\n\n        console.log(data);\n\n        //Set coordinates\n        setLatitude(currentLocation.latitude);\n        setlongitude(currentLocation.longitude);\n\n        const weatherData = data.daily;\n        setWeather(weatherData);\n\n        //Set days\n        let newDays = [];\n        data.daily.map((day) => {\n          let dayInt = new Date(day.dt*1000).toDateString();\n          newDays.push(dayInt);\n        })\n\n        setDays(newDays);\n      })\n  }\n\n\n  return (\n    <div>\n      <h1>Weather app</h1>\n      <h2></h2>\n      {weather.map((wvalues) => (\n        <div key={wvalues.dt}>\n          <h1>{wvalues.weather[0].description}</h1>\n        </div>\n      ))}\n      {days.map((day, index) => (\n        <h1 key={index}>{day}</h1>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}