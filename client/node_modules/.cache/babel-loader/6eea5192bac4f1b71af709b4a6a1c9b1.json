{"ast":null,"code":"var _jsxFileName = \"/Users/tylerwest/Desktop/weatherapp/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  var _userLocation$daily;\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]); //State changed\n\n  useEffect(() => {\n    getLocation();\n  }, []); //Get location\n\n  const getLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(position => {\n      const currentLocation = position.coords;\n      getWeather(currentLocation);\n    });\n  }; //Get weather\n\n\n  const getWeather = async currentLocation => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&appid=8bd04b4c4bc8f493a35b227dba34ae78`).then(response => response.json()).then(data => {\n      console.log(data); //User location\n\n      setUserLocation(data); //Set coordinates\n\n      setLatitude(currentLocation.latitude);\n      setlongitude(currentLocation.longitude);\n      const weatherData = data.daily;\n      setWeather(weatherData); //Set days\n\n      let newDays = [];\n      data.daily.map(day => {\n        let dayInt = new Date(day.dt * 1000).toDateString();\n        newDays.push(dayInt);\n      });\n      setDays(newDays);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: userLocation.timezone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: (_userLocation$daily = userLocation.daily) === null || _userLocation$daily === void 0 ? void 0 : _userLocation$daily.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: moment.unix(day.dt).format(\"dddd MM/DD\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: day.weather[0].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"a96+n+RsO7CUJ/Pct+fSypg3bkM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tylerwest/Desktop/weatherapp/client/src/App.js"],"names":["React","useEffect","useState","moment","App","latitude","setLatitude","longitude","setlongitude","userLocation","setUserLocation","weather","setWeather","days","setDays","getLocation","navigator","geolocation","getCurrentPosition","position","currentLocation","coords","getWeather","fetch","then","response","json","data","console","log","weatherData","daily","newDays","map","day","dayInt","Date","dt","toDateString","push","timezone","index","unix","format","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\n\nfunction App() {\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setlongitude] = useState(0);\n  const [userLocation, setUserLocation] = useState([]);\n  const [weather, setWeather] = useState([]);\n  const [days, setDays] = useState([]);\n\n    //State changed\n    useEffect(() => {\n      getLocation();\n    },[])\n\n //Get location\n const getLocation = async () => {\n  await navigator.geolocation.getCurrentPosition((position)=> {\n    const currentLocation = position.coords;\n    getWeather(currentLocation);\n  })\n }\n\n  //Get weather\n  const getWeather = async (currentLocation) => {\n    await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${currentLocation.latitude}&lon=${currentLocation.longitude}&appid=8bd04b4c4bc8f493a35b227dba34ae78`)\n      .then(response => response.json())\n      .then((data) => {\n\n        console.log(data);\n\n        //User location\n        setUserLocation(data);\n\n        //Set coordinates\n        setLatitude(currentLocation.latitude);\n        setlongitude(currentLocation.longitude);\n\n        const weatherData = data.daily;\n        setWeather(weatherData);\n\n        //Set days\n        let newDays = [];\n        data.daily.map((day) => {\n          let dayInt = new Date(day.dt*1000).toDateString();\n          newDays.push(dayInt);\n        })\n\n        setDays(newDays);\n      })\n  }\n\n\n  return (\n    <div>\n      <h1>Weather app</h1>\n      <h2>{userLocation.timezone}</h2>\n      <div>{userLocation.daily?.map((day,index) => (\n        <div key={index}>\n          <h1>{moment.unix(day.dt).format(\"dddd MM/DD\")}</h1>\n          <h4>{day.weather[0].description}</h4>\n          </div>\n      ))}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}